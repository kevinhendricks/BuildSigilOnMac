diff --git a/src/core/compositor/native_skia_output_device.cpp b/src/core/compositor/native_skia_output_device.cpp
index 3067e14a7..a7674efe5 100644
--- a/src/core/compositor/native_skia_output_device.cpp
+++ b/src/core/compositor/native_skia_output_device.cpp
@@ -356,7 +356,8 @@ void NativeSkiaOutputDevice::releaseResources(QQuickWindow *)
 }
 
 #if defined(Q_OS_MACOS)
-QSGTexture *makeMetalTexture(QQuickWindow *win, IOSurfaceRef io_surface, uint io_surface_plane, int width, int height, uint32_t textureOptions);
+QSGTexture *makeMetalTexture(QQuickWindow *win, IOSurfaceRef io_surface, uint io_surface_plane, int width, int height, uint32_t textureOptions, void **mtlTexture);
+void releaseMetalTexture(void *texture);
 QSGTexture *makeCGLTexture(QQuickWindow *win, IOSurfaceRef io_surface, int width, int height, uint32_t textureOptions, uint32_t *heldTexture);
 void releaseGlTexture(uint32_t);
 
@@ -369,13 +370,17 @@ QSGTexture *NativeSkiaOutputDevice::texture(QQuickWindow *win, uint32_t textureO
     QSGTexture *texture = nullptr;
     gfx::ScopedIOSurface ioSurface = m_frontBuffer->ioSurface();
     if (graphicsApi == QSGRendererInterface::Metal) {
-        texture = makeMetalTexture(win, ioSurface.release(), /* plane */ 0,
+        void *mtlTexture = nullptr;
+        texture = makeMetalTexture(win, ioSurface.get(), /* plane */ 0,
                                    m_shape.characterization.width(), m_shape.characterization.height(),
-                                   textureOptions);
+                                   textureOptions, &mtlTexture);
+        m_frontBuffer->m_textureCleanup = [mtlTexture]() {
+            releaseMetalTexture(mtlTexture);
+        };
 #if QT_CONFIG(opengl)
     } else if (graphicsApi == QSGRendererInterface::OpenGL) {
         uint heldTexture;
-        texture = makeCGLTexture(win, ioSurface.release(),
+        texture = makeCGLTexture(win, ioSurface.get(),
                                  m_shape.characterization.width(), m_shape.characterization.height(),
                                  textureOptions, &heldTexture);
         m_frontBuffer->m_textureCleanup = [heldTexture]() { releaseGlTexture(heldTexture); };
diff --git a/src/core/compositor/native_skia_output_device_mac.mm b/src/core/compositor/native_skia_output_device_mac.mm
index beadeeb1d..e46d6f727 100644
--- a/src/core/compositor/native_skia_output_device_mac.mm
+++ b/src/core/compositor/native_skia_output_device_mac.mm
@@ -18,14 +18,14 @@
 QSGTexture *makeMetalTexture2(QQuickWindow *win, id<MTLTexture> mtlTexture, int width, int height, uint32_t textureOptions);
 MTLDevice *getRhiDev(QQuickWindow *win);
 
-QSGTexture *makeMetalTexture(QQuickWindow *win, IOSurfaceRef io_surface, uint io_surface_plane, int width, int height, uint32_t textureOptions)
+QSGTexture *makeMetalTexture(QQuickWindow *win, IOSurfaceRef io_surface, uint io_surface_plane, int width, int height, uint32_t textureOptions, void **mtlTexture)
 {
     auto desc = [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatBGRA8Unorm
                  width:width height:height mipmapped:false];
 
     auto device = getRhiDev(win);
-    auto texture = [device newTextureWithDescriptor:desc iosurface:io_surface plane:io_surface_plane];
-    return makeMetalTexture2(win, texture, width, height, textureOptions);
+    *mtlTexture = [device newTextureWithDescriptor:desc iosurface:io_surface plane:io_surface_plane];
+    return makeMetalTexture2(win, static_cast<id<MTLTexture>>(*mtlTexture), width, height, textureOptions);
 }
 
 #if QT_CONFIG(opengl)
diff --git a/src/core/compositor/native_skia_output_device_mac2.mm b/src/core/compositor/native_skia_output_device_mac2.mm
index 3778ee8a0..6ef93b8dc 100644
--- a/src/core/compositor/native_skia_output_device_mac2.mm
+++ b/src/core/compositor/native_skia_output_device_mac2.mm
@@ -30,6 +30,12 @@ @protocol MTLTexture;
     return QNativeInterface::QSGMetalTexture::fromNative(mtlTexture, win, {width, height}, texOpts);
 }
 
+void releaseMetalTexture(void *texture)
+{
+    [static_cast<id<MTLTexture>>(texture) release];
+}
+
+
 #if QT_CONFIG(opengl)
 CGLContextObj getCGLContext(NSOpenGLContext *context);
 
